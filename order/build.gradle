if (isRelease) {//如果是发布版本时候，各个模块都不能独立运行
    apply plugin: 'com.android.library'
} else {
    apply plugin: 'com.android.application'
}

def rootAndroidId = rootProject.ext.androidId
def appId = rootProject.ext.appId
def support = rootProject.ext.dependencies
android {
    compileSdkVersion rootAndroidId.compileSdkVersion
    buildToolsVersion rootAndroidId.buildToolsVersion
    defaultConfig {
        if (!isRelease) {//如果是集成模式，不能有applicationId
            applicationId appId.order
        }

        minSdkVersion rootAndroidId.minSdkVersion
        targetSdkVersion rootAndroidId.targetSdkVersion
        versionCode rootAndroidId.versionCode
        versionName rootAndroidId.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        //这个方法介绍三个参数，第一个：确定值的类型，第二个：指定key的名字，第三个传值（必须是String）
        //为什么需要定义这个？因为src代码中有可能需要用到跨模块交互，如果是组件化模块显然不行
        //切记：不能再android 根节点，只能在defaultConfig或者buildTypes节点下
        buildConfigField("boolean", "isRelease", String.valueOf(isRelease))
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
//    配置资源路径，方便测试环境，打包不集成到正式环境
    sourceSets {
        main {
            if (!isRelease) {
                //如果是组件化模式，需要单独运行
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'
            } else {
                //如果是集成化模式，整个项目打包apk
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java {
                    //release 时候 debug目录下文件不需要合并到工程中
                    exclude '**/debug/**'
                }
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    //循环引入第三方
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    support.each { k, v -> implementation v }
    implementation project(':common')//公共基础库
    //依赖注解
    implementation project (':arouter_annotation')
}
